name: 🐳 Docker Deploy to psytest.su

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/psyweb

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏗️ Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🏗️ Build and push Frontend image
      uses: docker/build-push-action@v5
        with:
        context: ./frontend
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🔧 Setup SSH
      if: github.ref == 'refs/heads/main'
        run: |
        echo "🔧 Setting up SSH..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        
        # Создаем SSH config файл для лучшей совместимости
        cat > ~/.ssh/config << 'EOF'
        Host *
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            GlobalKnownHostsFile /dev/null
            ConnectTimeout 30
            ServerAliveInterval 10
            ServerAliveCountMax 3
            TCPKeepAlive yes
            AddressFamily inet
            PreferredAuthentications publickey
            PubkeyAuthentication yes
            PasswordAuthentication no
            BatchMode yes
        EOF
        
        # Проверяем доступность сервера
        echo "🔍 Testing server connectivity..."
        ping -c 3 ${{ secrets.SERVER_HOST }} || echo "⚠️ Ping failed, but continuing..."
        
        # Проверяем SSH порт
        echo "🔍 Testing SSH port 22..."
        nc -zv ${{ secrets.SERVER_HOST }} 22 || echo "⚠️ SSH port 22 not accessible"
        
        # Добавляем ключ хоста с принудительным IPv4
        echo "🔍 Adding host key..."
        ssh-keyscan -H -4 -p 22 ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || echo "⚠️ Could not add host key"
        
        # Проверяем содержимое known_hosts
        echo "🔍 Known hosts:"
        cat ~/.ssh/known_hosts | grep ${{ secrets.SERVER_HOST }} || echo "No host key found"
        
        # Тестируем SSH соединение с улучшенными параметрами
        echo "🔍 Testing SSH connection with verbose output..."
        ssh -vvv -o ConnectTimeout=30 -o ServerAliveInterval=10 -o ServerAliveCountMax=3 -o TCPKeepAlive=yes -o AddressFamily=inet -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes -o PasswordAuthentication=no -o BatchMode=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'" || echo "⚠️ SSH test failed, but continuing with deployment"
        
    - name: 🚀 Deploy to production server
      if: github.ref == 'refs/heads/main'
        run: |
        echo "🚀 Deploying Docker containers to ${{ secrets.SERVER_HOST }}..."
        
        # Проверяем наличие необходимых переменных
        if [ -z "${{ secrets.SERVER_HOST }}" ]; then
          echo "❌ SERVER_HOST secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.SERVER_USER }}" ]; then
          echo "❌ SERVER_USER secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "❌ SSH_PRIVATE_KEY secret is not set!"
          exit 1
        fi
        
        # Создаем файлы для деплоя
        mkdir -p deploy-temp
        
        # Копируем Docker файлы
        cp docker-compose.yml deploy-temp/ 2>/dev/null || true
        cp docker-compose.prod.yml deploy-temp/ 2>/dev/null || true
        cp nginx.conf deploy-temp/ 2>/dev/null || true
        cp deploy.sh deploy-temp/ 2>/dev/null || true
        
        # Создаем production docker-compose
        cat > deploy-temp/docker-compose.prod.yml << 'EOF'
        services:
          backend:
            image: ghcr.io/${{ github.repository_owner }}/psyweb-backend:latest
            container_name: psyweb-backend-prod
            ports:
              - "8000:8000"
            environment:
              - DEBUG=False
              - DJANGO_SETTINGS_MODULE=mindjourney.settings
              - ALLOWED_HOSTS=${{ secrets.SERVER_HOST }}
            volumes:
              - backend_static:/app/staticfiles
              - backend_media:/app/media
            networks:
              - psyweb-network
            restart: unless-stopped

          frontend:
            image: ghcr.io/${{ github.repository_owner }}/psyweb-frontend:latest
            container_name: psyweb-frontend-prod
            ports:
              - "3000:3000"
            environment:
              - REACT_APP_API_URL=http://${{ secrets.SERVER_HOST }}:8000/api
            depends_on:
              - backend
            networks:
              - psyweb-network
            restart: unless-stopped

          nginx:
            image: nginx:alpine
            container_name: psyweb-nginx-prod
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - ./nginx.conf:/etc/nginx/nginx.conf
              - backend_static:/var/www/static
              - backend_media:/var/www/media
            depends_on:
              - backend
              - frontend
            networks:
              - psyweb-network
            restart: unless-stopped

        volumes:
          backend_static:
          backend_media:

        networks:
          psyweb-network:
            driver: bridge
        EOF
        
        # Создаем скрипт деплоя с правильной аутентификацией
        cat > deploy-temp/deploy-docker.sh << 'EOF'
        #!/bin/bash
        echo "🐳 Starting Docker deployment on ${{ secrets.SERVER_HOST }}..."
        
        # Останавливаем старые контейнеры
        echo "🛑 Stopping old containers..."
        docker-compose -f docker-compose.prod.yml down || true
        
        # Удаляем старые образы (только неиспользуемые)
        echo "🧹 Cleaning up unused images..."
        docker image prune -f
        
        # Логинимся в GitHub Container Registry
        echo "🔑 Logging into GitHub Container Registry..."
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
        # Проверяем доступность образов
        echo "🔍 Checking image availability..."
        docker pull ghcr.io/${{ github.repository_owner }}/psyweb-backend:latest
        docker pull ghcr.io/${{ github.repository_owner }}/psyweb-frontend:latest
        
        # Запускаем новые контейнеры
        echo "🚀 Starting new containers..."
        docker-compose -f docker-compose.prod.yml up -d
        
        # Ждем немного для запуска
        echo "⏳ Waiting for containers to start..."
        sleep 10
        
        # Проверяем статус
        echo "📊 Container status:"
        docker-compose -f docker-compose.prod.yml ps
        
        # Проверяем логи на ошибки
        echo "📋 Recent logs:"
        docker-compose -f docker-compose.prod.yml logs --tail=20
        
        echo "✅ Docker deployment completed!"
        EOF
        
        chmod +x deploy-temp/deploy-docker.sh
        
        # Создаем архив
        tar -czf psyweb-docker-deploy.tar.gz -C deploy-temp .
        
        # Очищаем временную папку
        rm -rf deploy-temp
        
        # Передаем файлы на сервер
        echo "📤 Uploading Docker deployment files..."
        echo "SERVER_USER: ${{ secrets.SERVER_USER }}"
        echo "SERVER_HOST: ${{ secrets.SERVER_HOST }}"
        
        # Пробуем scp с улучшенными параметрами
        echo "📤 Uploading deployment files via SCP..."
        if ! scp -o ConnectTimeout=60 -o ServerAliveInterval=10 -o ServerAliveCountMax=3 -o TCPKeepAlive=yes -o AddressFamily=inet -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes -o PasswordAuthentication=no -o BatchMode=yes psyweb-docker-deploy.tar.gz "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/"; then
          echo "⚠️ SCP failed, trying rsync..."
          rsync -avz -e "ssh -o ConnectTimeout=60 -o ServerAliveInterval=10 -o ServerAliveCountMax=3 -o TCPKeepAlive=yes -o AddressFamily=inet -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes -o PasswordAuthentication=no -o BatchMode=yes" psyweb-docker-deploy.tar.gz "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/"
        fi
        
        # Выполняем деплой на сервере
        echo "🔧 Deploying Docker containers on server..."
        ssh -o ConnectTimeout=60 -o ServerAliveInterval=10 -o ServerAliveCountMax=3 -o TCPKeepAlive=yes -o AddressFamily=inet -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes -o PasswordAuthentication=no -o BatchMode=yes "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" << 'EOF'
          echo "Starting Docker deployment on ${{ secrets.SERVER_HOST }}..."
          cd /opt/psyweb || mkdir -p /opt/psyweb && cd /opt/psyweb
          
          # Распаковываем файлы деплоя
          echo "📦 Extracting deployment files..."
          tar -xzf /tmp/psyweb-docker-deploy.tar.gz
          
          # Запускаем деплой
          echo "🚀 Running deployment script..."
          chmod +x deploy-docker.sh
          ./deploy-docker.sh
          
          # Очищаем временные файлы
          rm -f /tmp/psyweb-docker-deploy.tar.gz
          
          echo "✅ Docker deployment completed on ${{ secrets.SERVER_HOST }}!"
        EOF
        
    - name: 📊 Deployment success
      if: github.ref == 'refs/heads/main'
        run: |
        echo "✅ Docker deployment completed successfully!"
          echo "🌐 Application is live at: http://${{ secrets.SERVER_HOST }}"
          echo "🔗 Frontend: http://${{ secrets.SERVER_HOST }}:3000"
          echo "🔗 Backend API: http://${{ secrets.SERVER_HOST }}:8000"
          echo "🔗 Admin: http://${{ secrets.SERVER_HOST }}:8000/admin"