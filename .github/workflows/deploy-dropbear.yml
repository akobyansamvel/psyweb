name: üöÄ Fast Deploy (Dropbear Compatible)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_PORT: ${{ secrets.SERVER_PORT }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: üì¶ Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: üîß Install Python dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üóÑÔ∏è Setup Database
      run: |
        cd backend
        python manage.py migrate --noinput
        
    - name: üìÅ Collect static files
      run: |
        cd backend
        python manage.py collectstatic --noinput
        
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: üì¶ Cache Node modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: üîß Install Node dependencies
      run: |
        cd frontend
        npm ci --only=production
        
    - name: üèóÔ∏è Build React app
      run: |
        cd frontend
        npm run build
        
    - name: üîë Setup SSH (Dropbear Compatible)
      if: github.ref == 'refs/heads/main'
      run: |
        mkdir -p ~/.ssh
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ sshpass –¥–ª—è –ø–∞—Ä–æ–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        sudo apt-get update
        sudo apt-get install -y sshpass
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH config –¥–ª—è Dropbear
        echo "Host $SERVER_HOST" >> ~/.ssh/config
        echo "  Port $SERVER_PORT" >> ~/.ssh/config
        echo "  User $SERVER_USER" >> ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
        echo "  ServerAliveInterval 5" >> ~/.ssh/config
        echo "  ServerAliveCountMax 3" >> ~/.ssh/config
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if [ -n "$SSH_PRIVATE_KEY" ]; then
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "  PubkeyAuthentication yes" >> ~/.ssh/config
          echo "  PasswordAuthentication no" >> ~/.ssh/config
          echo "  PreferredAuthentications publickey" >> ~/.ssh/config
        else
          # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å
          echo "  PubkeyAuthentication no" >> ~/.ssh/config
          echo "  PasswordAuthentication yes" >> ~/.ssh/config
          echo "  PreferredAuthentications password" >> ~/.ssh/config
        fi
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        echo "Testing SSH connection to Dropbear server..."
        if [ -n "$SSH_PRIVATE_KEY" ]; then
          ssh -o ConnectTimeout=15 $SERVER_HOST "echo 'SSH connection successful'"
        else
          sshpass -p "$SERVER_PASSWORD" ssh -o ConnectTimeout=15 $SERVER_HOST "echo 'SSH connection successful'"
        fi
        
    - name: üöÄ Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ Deploying to production server..."
        echo "Server: $SERVER_USER@$SERVER_HOST:$SERVER_PORT"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –¥–µ–ø–ª–æ—è
        mkdir -p deploy-temp
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        cp -r backend deploy-temp/
        cp -r frontend deploy-temp/
        cp -r .github deploy-temp/
        cp docker-compose.yml deploy-temp/ 2>/dev/null || true
        cp nginx.conf deploy-temp/ 2>/dev/null || true
        cp deploy.sh deploy-temp/ 2>/dev/null || true
        cp requirements.txt deploy-temp/ 2>/dev/null || true
        cp package.json deploy-temp/ 2>/dev/null || true
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
        tar -czf psyweb-deploy.tar.gz -C deploy-temp .
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        rm -rf deploy-temp
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        echo "üì§ Uploading files to server..."
        if [ -n "$SSH_PRIVATE_KEY" ]; then
          scp -o ConnectTimeout=30 psyweb-deploy.tar.gz $SERVER_HOST:/tmp/
        else
          sshpass -p "$SERVER_PASSWORD" scp -o ConnectTimeout=30 psyweb-deploy.tar.gz $SERVER_HOST:/tmp/
        fi
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        echo "üîß Deploying on server..."
        if [ -n "$SSH_PRIVATE_KEY" ]; then
          ssh -o ConnectTimeout=30 $SERVER_HOST << 'EOF'
        else
          sshpass -p "$SERVER_PASSWORD" ssh -o ConnectTimeout=30 $SERVER_HOST << 'EOF'
        fi
          echo "Starting deployment on server..."
          cd /opt/psyweb || mkdir -p /opt/psyweb && cd /opt/psyweb
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
          echo "Stopping current processes..."
          pkill -f "python manage.py runserver" || true
          pkill -f "nginx" || true
          
          # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
          echo "Extracting new code..."
          tar -xzf /tmp/psyweb-deploy.tar.gz -C .
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
          echo "Installing Python dependencies..."
          cd backend
          pip install -r requirements.txt &
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js
          echo "Installing Node.js dependencies..."
          cd ../frontend
          npm ci --only=production &
          
          # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
          wait
          
          # –°–æ–±–∏—Ä–∞–µ–º React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          echo "Building React app..."
          npm run build &
          
          # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
          echo "Running migrations..."
          cd ../backend
          python manage.py migrate --noinput &
          
          # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
          echo "Collecting static files..."
          python manage.py collectstatic --noinput &
          
          # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
          wait
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
          echo "Starting services..."
          python manage.py runserver 0.0.0.0:8000 &
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º Nginx
          nginx -c /opt/psyweb/nginx.conf &
          
          # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm -f /tmp/psyweb-deploy.tar.gz
          
          echo "‚úÖ Deployment completed on server!"
        EOF
        
    - name: üìä Deployment success
      if: github.ref == 'refs/heads/main'
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üåê Application is live at: http://$SERVER_HOST"
        echo "üîó Server: $SERVER_USER@$SERVER_HOST:$SERVER_PORT"
