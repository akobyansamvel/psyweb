from django.core.management.base import BaseCommand
from api.models import Test, Question, Answer, PsyToolkitTest

class Command(BaseCommand):
    help = '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏, –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏'

    def handle(self, *args, **options):
        self.stdout.write('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ç–µ—Å—Ç–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        test_questions_map = {
            'Big Five Personality Test': [
                '–Ø –ª–µ–≥–∫–æ –∑–Ω–∞–∫–æ–º–ª—é—Å—å —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏',
                '–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ',
                '–Ø –ª—é–±–ª—é –ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–µ—â–∏',
                '–Ø –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è—é —Å–≤–æ–∏ –æ–±–µ—â–∞–Ω–∏—è',
                '–Ø —á–∞—Å—Ç–æ –±–µ—Å–ø–æ–∫–æ—é—Å—å –æ –±—É–¥—É—â–µ–º'
            ],
            'MBTI Personality Assessment': [
                '–í –∫–æ–º–ø–∞–Ω–∏–∏ —è –æ–±—ã—á–Ω–æ:',
                '–ü—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π —è –±–æ–ª—å—à–µ –ø–æ–ª–∞–≥–∞—é—Å—å –Ω–∞:',
                '–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ:'
            ],
            'Raven\'s Progressive Matrices': [
                '–ö–∞–∫–∞—è —Ñ–∏–≥—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –º–µ—Å—Ç–µ –∑–Ω–∞–∫–∞ –≤–æ–ø—Ä–æ—Å–∞?',
                '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2, 4, 8, 16, ?',
                '–ï—Å–ª–∏ –≤—Å–µ —Ä–æ–∑—ã - —Ü–≤–µ—Ç—ã, –∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ü–≤–µ—Ç—ã –±—ã—Å—Ç—Ä–æ —É–≤—è–¥–∞—é—Ç, —Ç–æ:'
            ],
            'Beck Depression Inventory': [
                '–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≥—Ä—É—Å—Ç—å?',
                '–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–π —Å–æ–Ω?',
                '–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–π –∞–ø–ø–µ—Ç–∏—Ç?'
            ]
        }
        
        fixed_count = 0
        
        for test_name, question_texts in test_questions_map.items():
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç
                test = Test.objects.filter(name__icontains=test_name[:20]).first()
                if not test:
                    self.stdout.write(f'‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_name}')
                    continue
                
                self.stdout.write(f'üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç: {test.name}')
                
                # –ù–∞—Ö–æ–¥–∏–º –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
                for i, question_text in enumerate(question_texts):
                    # –ò—â–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—É
                    question = Question.objects.filter(text__icontains=question_text[:30]).first()
                    if question:
                        # –°–≤—è–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å —Ç–µ—Å—Ç–æ–º
                        question.test = test
                        question.order = i + 1
                        question.save()
                        
                        # –°–≤—è–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–æ–º
                        answers = Answer.objects.filter(text__icontains=question_text[:20])
                        for answer in answers:
                            answer.question = question
                            answer.save()
                        
                        self.stdout.write(f'  ‚úì –í–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω: {question.text[:50]}...')
                        fixed_count += 1
                    else:
                        self.stdout.write(f'  ‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {question_text[:50]}...')
                
            except Exception as e:
                self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ {test_name}: {e}')
        
        self.stdout.write(
            self.style.SUCCESS(f'–°–≤—è–∑–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {fixed_count}')
        )
