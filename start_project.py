#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ MindJourney
"""

import os
import sys
import subprocess
import time
import platform

def print_banner():
    """–í—ã–≤–æ–¥–∏—Ç –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞"""
    print("""
üß† MindJourney - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç
====================================================
üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ (TypeScript + Django)
""")

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False
    print(f"‚úÖ Python: {sys.version.split()[0]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    try:
        result = subprocess.run(['node', '--version'], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        print(f"‚úÖ Node.js: {result.stdout.strip()}")
    except FileNotFoundError:
        print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ npm
    try:
        result = subprocess.run(['npm', '--version'], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        print(f"‚úÖ npm: {result.stdout.strip()}")
    except FileNotFoundError:
        print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript
    try:
        result = subprocess.run(['npx', 'tsc', '--version'], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ö†Ô∏è TypeScript –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
        else:
            print(f"‚úÖ TypeScript: {result.stdout.strip()}")
    except FileNotFoundError:
        print("‚ö†Ô∏è TypeScript –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
    return True

def setup_backend():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç backend"""
    print("\nüêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django Backend...")
    
    if not os.path.exists('backend'):
        print("‚ùå –ü–∞–ø–∫–∞ backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    os.chdir('backend')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.path.exists('venv'):
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        subprocess.run([sys.executable, '-m', 'venv', 'venv'])
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if platform.system() == "Windows":
        activate_script = os.path.join('venv', 'Scripts', 'activate.bat')
        pip_path = os.path.join('venv', 'Scripts', 'pip.exe')
        python_path = os.path.join('venv', 'Scripts', 'python.exe')
    else:
        activate_script = os.path.join('venv', 'bin', 'activate')
        pip_path = os.path.join('venv', 'bin', 'pip')
        python_path = os.path.join('venv', 'bin', 'python')
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    result = subprocess.run([pip_path, 'install', '-r', 'requirements.txt'])
    if result.returncode != 0:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        os.chdir('..')
        return False
    
    # –ú–∏–≥—Ä–∞—Ü–∏–∏
    print("üóÑÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
    result = subprocess.run([python_path, 'manage.py', 'makemigrations'])
    if result.returncode != 0:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)")
    
    result = subprocess.run([python_path, 'manage.py', 'migrate'])
    if result.returncode != 0:
        print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π")
        os.chdir('..')
        return False
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    demo_data_path = 'api/fixtures/demo_data.json'
    if os.path.exists(demo_data_path):
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö...")
        result = subprocess.run([python_path, 'manage.py', 'loaddata', demo_data_path])
        if result.returncode != 0:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("‚úÖ Backend –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    os.chdir('..')
    return True

def setup_frontend():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç frontend"""
    print("\n‚öõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ React Frontend (TypeScript)...")
    
    if not os.path.exists('frontend'):
        print("‚ùå –ü–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    os.chdir('frontend')
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    result = subprocess.run(['npm', 'install'])
    if result.returncode != 0:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        os.chdir('..')
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    if os.path.exists('tsconfig.json'):
        result = subprocess.run(['npx', 'tsc', '--noEmit'])
        if result.returncode != 0:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ TypeScript (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥)")
        else:
            print("‚úÖ TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print("‚ùå –§–∞–π–ª tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        os.chdir('..')
        return False
    
    print("‚úÖ Frontend –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    os.chdir('..')
    return True

def start_services():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç backend –∏ frontend"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫ backend –≤ —Ñ–æ–Ω–µ
    print("üêç –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞...")
    if platform.system() == "Windows":
        backend_cmd = ['cmd', '/c', 'cd backend && venv\\Scripts\\activate && python manage.py runserver']
    else:
        backend_cmd = ['bash', '-c', 'cd backend && source venv/bin/activate && python manage.py runserver']
    
    try:
        backend_process = subprocess.Popen(backend_cmd)
        print("‚úÖ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Django —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ backend
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend...")
    time.sleep(5)
    
    # –ó–∞–ø—É—Å–∫ frontend –≤ —Ñ–æ–Ω–µ
    print("‚öõÔ∏è –ó–∞–ø—É—Å–∫ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        frontend_process = subprocess.Popen(['npm', 'start'], cwd='frontend')
        print("‚úÖ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        backend_process.terminate()
        return
    
    print("""
üéâ –ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω!

üì± Frontend: http://localhost:3000
üêç Backend: http://localhost:8000
üîê Admin: http://localhost:8000/admin
üìä API: http://localhost:8000/api/

üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:
‚Ä¢ TypeScript –¥–ª—è —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ª–∏—á–Ω–æ—Å—Ç–∏
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã D3.js
‚Ä¢ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π

–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C
""")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        backend_process.wait()
        frontend_process.wait()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            backend_process.terminate()
            frontend_process.terminate()
            print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    if not check_requirements():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return
    
    if not setup_backend():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å backend")
        return
    
    if not setup_frontend():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å frontend")
        return
    
    start_services()

if __name__ == "__main__":
    main()
